name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'
  push:
    tags:
      - v*.*.*

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
      fail-fast: false

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release tag
        id: get-tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.12.0'

      - name: macOS dependencies fix
        if: matrix.os == 'macos-latest'
        run: |
          brew install python-setuptools

      - name: Install corepack
        run: corepack enable && corepack prepare yarn@stable --activate

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: yarn install

      - name: Create environment files
        run: |
          echo "NODE_ENV=production" > .env.pro
          echo "ELECTRON=1" >> .env.pro
        shell: bash

      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          yarn build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=8192
          NODE_ENV: production

      - name: Build Mac
        if: matrix.os == 'macos-latest'
        run: |
          sudo -H pip install setuptools
          yarn build
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=8192
          NODE_ENV: production

      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: |
          yarn build
        env:
          CSC_LINK: ''
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=8192
          NODE_ENV: production

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          draft: false
          allowUpdates: true
          makeLatest: true
          tag: ${{ steps.get-tag.outputs.tag }}
          name: Release ${{ steps.get-tag.outputs.tag }}
          body: |
            ## 🎉 新版本发布 ${{ steps.get-tag.outputs.tag }}

            ### 📦 下载链接
            - **Windows**: 下载 `.exe` 文件
            - **macOS**: 下载 `.dmg` 文件
            - **Linux**: 下载 `.AppImage` 文件

            ### 🔧 安装说明
            - **Windows**: 双击 `.exe` 文件安装
            - **macOS**: 双击 `.dmg` 文件，将应用拖拽到 Applications 文件夹
            - **Linux**: 给 `.AppImage` 文件添加执行权限后直接运行

            ---

            **完整更新日志**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ steps.get-tag.outputs.tag }}
          artifacts: 'release/*.exe,release/*.zip,release/*.dmg,release/*.AppImage,release/*.snap,release/*.deb,release/*.rpm,release/*.tar.gz,release/latest*.yml,release/*.blockmap'
          token: ${{ secrets.GITHUB_TOKEN }}
