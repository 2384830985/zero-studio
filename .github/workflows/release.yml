name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'
#  push:
#    tags:
#      - v*.*.*
  push: # 修改后的触发条件
    branches: # 可指定分支（按需调整）
      - main

permissions:
  contents: write
  actions: read
  security-events: write

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
      fail-fast: false

    steps:
      - name: 步骤1：获取代码（包含完整git历史）
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取全部提交历史（必需获取tag信息）[1](@ref)

      - name: 步骤2：动态获取Release标签
        id: get-tag # 步骤ID，用于后续引用
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "Error: Invalid trigger or ref"
            exit 1
          fi

      - name: 步骤3：安装Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: '22.12.0' # 固定Node版本保证一致性

      - name: 步骤4：macOS专属依赖修复
        if: matrix.os == 'macos-latest'  # 条件执行：仅macOS生效
        run: |  # 解决macOS常见构建依赖问题
          brew install python-setuptools

      - name: 步骤5：安装指定版本Yarn
        run: npm install -g yarn@1.22.22

      - name: 步骤6：获取Yarn缓存目录
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            node_modules
          key: ${{ runner.os }}-yarn-v1-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v1-

      - name: 步骤7：验证Yarn版本并安装依赖
        run: |
          # 验证 Yarn 版本
          yarn --version
          # 安装依赖
          yarn install --frozen-lockfile

      - name: 步骤8：配置生产环境变量
        run: |
          echo "NODE_ENV=production" > .env.pro
          echo "ELECTRON=1" >> .env.pro
        shell: bash

      # 步骤9-11：多平台构建（各平台独立配置）
      # Linux构建（Ubuntu）
      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          yarn build
        env:
          GH_TOKEN: ${{ secrets.GIT_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=8192
          NODE_ENV: production

      # macOS构建（特殊处理签名）
      - name: Build Mac
        if: matrix.os == 'macos-latest'
        run: |
          sudo -H pip install setuptools
          yarn build
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false   # 禁用自动证书发现（需自行配置签名）
          GH_TOKEN: ${{ secrets.GIT_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=8192
          NODE_ENV: production

      # Windows构建（禁用代码签名）
      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: |
          yarn build
        env:
          CSC_LINK: ''
          GH_TOKEN: ${{ secrets.GIT_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=8192
          NODE_ENV: production

      # 创建GitHub Release
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          draft: false
          allowUpdates: true
          makeLatest: true
          tag: ${{ steps.get-tag.outputs.tag }}
          name: Release ${{ steps.get-tag.outputs.tag }}
          body: |
            ## 🎉 新版本发布 ${{ steps.get-tag.outputs.tag }}

            ### 📦 下载链接
            - **Windows**: 下载 `.exe` 文件
            - **macOS**: 下载 `.dmg` 文件
            - **Linux**: 下载 `.AppImage` 文件

            ### 🔧 安装说明
            - **Windows**: 双击 `.exe` 文件安装
            - **macOS**: 双击 `.dmg` 文件，将应用拖拽到 Applications 文件夹
            - **Linux**: 给 `.AppImage` 文件添加执行权限后直接运行

            ---

            **完整更新日志**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ steps.get-tag.outputs.tag }}
          artifacts: 'release/*.exe,release/*.zip,release/*.dmg,release/*.AppImage,release/*.snap,release/*.deb,release/*.rpm,release/*.tar.gz,release/latest*.yml,release/*.blockmap'
          token: ${{ secrets.GITHUB_TOKEN }}
