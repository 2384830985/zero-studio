name: Build and Release

on:
  push:
    tags:
      - 'v*' # 当推送以 v 开头的标签时触发，如 v1.0.0
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.12.0'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Create environment files
        run: |
          echo "NODE_ENV=production" > .env.pro
          echo "ELECTRON=1" >> .env.pro
        shell: bash

      - name: Build application
        run: yarn build
        env:
          NODE_ENV: production

      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        run: yarn electron:build
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false # 禁用代码签名

      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: yarn electron:build
        env:
          CSC_LINK: '' # 禁用代码签名

      - name: Build Electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: yarn electron:build

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: release/

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: release/

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: release/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: find artifacts -type f -name "*" | head -20

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 🎉 新版本发布 ${{ github.ref_name }}

            ### 📦 下载链接
            - **Windows**: 下载 `.exe` 文件
            - **macOS**: 下载 `.dmg` 文件
            - **Linux**: 下载 `.AppImage` 文件

            ### 🔧 安装说明
            - **Windows**: 双击 `.exe` 文件安装
            - **macOS**: 双击 `.dmg` 文件，将应用拖拽到 Applications 文件夹
            - **Linux**: 给 `.AppImage` 文件添加执行权限后直接运行

            ---

            **完整更新日志**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.ref_name }}
          files: |
            artifacts/macos-build/*.dmg
            artifacts/windows-build/*.exe
            artifacts/linux-build/*.AppImage
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
